<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
         <record id="ir_cron_scheduler_overtime" model="ir.cron">
             <field name="name">Run Overtime Scheduler</field>
             <field name="model_id" ref="model_simplit_hr_overtime"/>
             <field name="state">code</field>
             <field name="code">model.run_overtime_scheduler()</field>
             <field name="interval_number">1</field>
             <field name="interval_type">days</field>
             <field name="numbercall">-1</field>
             <field name="doall" eval="False"/>
        </record>

        <record id="overtime_approval_submit_action_server" model="ir.actions.server">
            <field name="name">Overtime Approval</field>
            <field name="type">ir.actions.server</field>
            <field name="model_id" ref="model_simplit_hr_overtime"/>
             <field name="binding_model_id" ref="model_simplit_hr_overtime"/>
            <field name="state">code</field>
            <field name="code">for rec in records:
    rec.write({'state':'validate','overtime_hours':rec.actual_overtime_hours})
    if rec.day_type in ['weekend','public holiday']:
        leave_type_id = rec.env['hr.leave.type'].search([('category', '=', 'annual'), ('company_id', '=', rec.employee_id.company_id.id)],limit=1)
        allocation_val = {'name': leave_type_id.name,
                          'holiday_status_id': leave_type_id.id,
                          'allocation_type': 'regular',
                          'number_of_days': 1,
                          'number_per_interval': 1,
                          'interval_number': 1,
                          'unit_per_interval': 'days',
                          'interval_unit': 'weeks',
                          'holiday_type': 'employee',
                          'employee_id': rec.employee_id.id,}
        rec.env['hr.leave.allocation'].sudo().create(allocation_val)</field>
        </record>

        <record id="overtime_approval_cancel_action_server" model="ir.actions.server">
            <field name="name">Cancel</field>
            <field name="type">ir.actions.server</field>
            <field name="model_id" ref="model_simplit_hr_overtime"/>
             <field name="binding_model_id" ref="model_simplit_hr_overtime"/>
            <field name="state">code</field>
            <field name="code">records.write({'state':'cancel'})</field>
        </record>

        <record id="OVT" model="hr.salary.rule.category">
            <field name="name">Overtime</field>
            <field name="code">OVT</field>
        </record>
        <record id="SLVS" model="hr.salary.rule.category">
            <field name="name">Sick Leaves</field>
            <field name="code">SLVS</field>
        </record>
        <record id="salary_rule_sick_leave" model="hr.salary.rule">
          <field name="struct_id" ref="l10n_ae_hr_payroll.uae_employee_payroll_structure"/>
            <field name="code">SLVS</field>
            <field name="name">Sick Leave</field>
            <field name="category_id" ref="simplit_hr_overtime.SLVS"/>
            <field name="amount_select">code</field>
<!--            <field name="amount_python_compute">result = (categories.GROSS)/26/8*(payslip.overtime_of_month)</field>-->
            <field name="amount_python_compute">if payslip.sick_leaves_duration > 0:
    result = (categories.GROSS / employee.get_btw_dates_working_days(payslip.date_from, payslip.date_to) * payslip.sick_leaves_duration) * payslip.get_sick_leave_pay_rate()
else:
    result=0
            </field>
            <field name="sequence" eval="102"/>
        </record>
        <record id="salary_rule_overtime" model="hr.salary.rule">
          <field name="struct_id" ref="l10n_ae_hr_payroll.uae_employee_payroll_structure"/>
            <field name="code">OVT</field>
            <field name="name">Overtime</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="amount_select">code</field>
<!--            <field name="amount_python_compute">result = (categories.GROSS)/26/8*(payslip.overtime_of_month)</field>-->
            <field name="amount_python_compute">if payslip.fixed_ot:
    result = payslip.fixed_ot_amount
elif payslip.wage_ot:
    result = sum(contract.related_compensation.filtered(lambda x: (x.name.component_type == 'housing_allowance' and x.amount_type == 'amount' and x.state == 'active') or (x.name.component_type == 'basic_pay' and x.amount_type == 'amount' and x.state == 'active') or (x.name.component_type == 'transportation_allowance' and x.amount_type == 'amount' and x.state == 'active')).mapped('amount'))/employee.get_btw_dates_working_days(payslip.date_from, payslip.date_to)/employee.resource_calendar_id.hours_per_day *(payslip.overtime_of_month)
else:
    result=0
            </field>
            <field name="sequence" eval="102"/>
        </record>
    </data>
</odoo>
